const BN = require('bn.js');
const bn = new BN();
var EC = require('elliptic').ec;
var ec = new EC('secp256k1');
var curve = require('elliptic').curve;

const shares = [new BN("5a4441354d4442695a574931596a42684f4445354e6a49314d3256684e4455794e6a51774e6a56694d7a4a6d5a5455334d325a684d4759784e6a51775954466a595441775a4445774d324531596a4a6a5954426a4e5451774f574d794d4455334d545a6b4f4755774e6a5a694e3245304d44497a5a444e684e546b314d7a4935", 16),
new BN("5a5451354e5759344d575178596d4a68596d55795a47466b5a574a6c4e44426d4e6a4e6c4d3249304e7a4d3159324a684d474935597a49314d6a68695a6d5a694e4755334d6d5a6c4f446b795a6a63344f54566b4d57466c4f5745334e54453359575a6d4e7a4a685a544a69595455304e474d78595749774f575a6b4e6a646b", 16),
new BN("4e324e6b4e6a49334f5759794d5755324e54646c5a4751304d54466b4f544577596d4a6a4e546b344d3256684e5463775a57597a4d4451785a54566c5a6d4a6d4d6a4178596a6b774e545a6c4f47517a5a545a6a5a544a695a4449324d324a685a544534596a646959574a6a59546c6a4e7a6c6a4e44566b4e474a6c5a6a6334", 16),
new BN("4d324e6c4d6a426c4d6d566b4d54637a4e3245315957526d4d47526b4d3249774d474933597a6b344f54566b4d5755774e6a56684d6d59354d3249344d4464684d545579596d45354f574a6d4d475a685a444933597a67354d3255354e7a633059324a6a5a574e6c596d49305a474a6b4d6d4577593259784e6a59304d6d5979", 16),
//new BN("4d6d45305a4445305a474d334f546333597a67794e6a5a6b59544931596a4a6b59574a6d5a4449794d7a426d4d6d4d784d44466d5a6a566d5a4451354d6a67325a6d55344e4459354f475a6c595459774d444e6b593249784f474d354d6a45315a4464695a44426b4f446c6d4f5467354d7a51344e324d775a4467304f444977", 16),
//new BN("596a45334d47566c4d3249314e6d59774d4445314d6a553459544a69596d517a596d55354f47566a4d444d324d6a6b78595455304e4746684d7a4d335a47466c4d6d4a6a597a41794d6a41354d5463355a6a646d4e4467324d4745305a6d45304e6a67335a5455304d47497859544d784f5745335a47526d5a6d49324d475669", 16),
new BN("4f4445344f54497a5a6a5a6d4d6a5a6c4f546b305a474a6d4d32526c5a6a49774e5445314d575932597a45314e474d784d6a42695a6a686b4e6a6b774d6a4933596a68685a545978596a566c4e5449344d475a6b4d7a6b7a4f4455784d7a597a5a444532596d466b593256684d44566c597a55344f44466b4d4752694d575a6d", 16),
  //new BN("4e325a6d5a6d49314d4752695a546c695a5751794e7a55344e7a4d784e5745784d546b344d4441324f474a6c5932457a5a575a6c4e5749324d574e684d5751355a6d497a5a6d51775a6a67784e445a6b59325135596d566d4d6a67354e5749344e7a517a597a4132596a59354d6a5a6c5a47566b593256694e3251784f474535", 16)
];



const nodeIndex = [new BN(0),
new BN(2),
new BN(3),
new BN(4),
//new BN(5),
//new BN(6),
new BN(8),
  //new BN(9)
];


function lagrangeInterpolation(shares, nodeIndex) {
  if (shares.length !== nodeIndex.length) {
    return null;
  }
  let secret = new BN(0);
  for (let i = 0; i < shares.length; i += 1) {
    let upper = new BN(1);
    let lower = new BN(1);
    for (let j = 0; j < shares.length; j += 1) {
      if (i !== j) {
        upper = upper.mul(nodeIndex[j].neg());
        upper = upper.umod(ec.n);
        let temp = nodeIndex[i].sub(nodeIndex[j]);
        temp = temp.umod(ec.n);
        lower = lower.mul(temp).umod(ec.n);
      }
    }
    let delta = upper.mul(lower.invm(ec.n)).umod(ec.n);
    delta = delta.mul(shares[i]).umod(ec.n);
    secret = secret.add(delta);
  }
  return secret.umod(ec.n);
}


const derivedPrivateKey = lagrangeInterpolation(shares, nodeIndex);
console.log(derivedPrivateKey);
